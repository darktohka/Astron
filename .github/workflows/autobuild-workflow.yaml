name: Build Astron

on: [push, workflow_dispatch, repository_dispatch]

env:
  CMAKE_PREFIX_PATH: "${{ github.workspace }}\\libraries\\odbc;${{ github.workspace }}\\libraries\\sqlite;${{ github.workspace }}\\libraries\\bison;${{ github.workspace }}\\libraries\\uvw;${{ github.workspace }}\\libraries\\boost;${{ github.workspace }}\\libraries\\openssl;${{ github.workspace }}\\libraries\\soci;${{ github.workspace }}\\libraries\\mongoc;${{ github.workspace }}\\libraries\\mongocxx;${{ github.workspace }}\\libraries\\libuv;${{ github.workspace }}\\libraries\\yaml;${{ github.workspace }}\\libraries"
  CURL_OPTIONS: "-fsSL --connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 40"

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            build_type: Release
            c_standard: "17"
            cxx_standard: "20"
            c_flags: "-D_FORTIFY_SOURCE=2 -O3 -fstack-protector-strong -fstack-clash-protection -fPIE -flto -Wformat -Wformat-security"
            cxx_flags: "-D_FORTIFY_SOURCE=2 -O3 -fstack-protector-strong -fstack-clash-protection -fPIE -flto -Wformat -Wformat-security"
            exe_linker_flags: ""
            openssl_arch: "linux-x86_64"
            openssl_options: "-D_FORTIFY_SOURCE=2 -O3 -fstack-protector-strong -fstack-clash-protection -flto -Wformat -Wformat-security"
          - os: arm64
            build_type: Release
            c_standard: "17"
            cxx_standard: "20"
            c_flags: "-D_FORTIFY_SOURCE=2 -O3 -fstack-protector-strong -fPIE -flto -Wformat -Wformat-security -mcpu=ampere1"
            cxx_flags: "-D_FORTIFY_SOURCE=2 -O3 -fstack-protector-strong -fPIE -flto -Wformat -Wformat-security -mcpu=ampere1"
            exe_linker_flags: ""
            openssl_arch: "linux-aarch64"
            openssl_options: "-D_FORTIFY_SOURCE=2 -O3 -fstack-protector-strong -flto -Wformat -Wformat-security -mcpu=ampere1"
    runs-on: ${{ matrix.os }}
    name: Build for ${{ matrix.os }} (${{ matrix.build_type }})
    steps:
      - name: Query third party commits
        id: query
        shell: bash
        run: |
          echo "::set-output name=MONGOC_COMMIT::$(curl $CURL_OPTIONS https://api.github.com/repos/mongodb/mongo-c-driver/commits/master | jq -r .sha)" && \
          echo "::set-output name=MONGOCXX_COMMIT::$(curl $CURL_OPTIONS https://api.github.com/repos/mongodb/mongo-cxx-driver/commits/master | jq -r .sha)" && \
          echo "::set-output name=OPENSSL_COMMIT::$(curl $CURL_OPTIONS https://api.github.com/repos/openssl/openssl/commits/master | jq -r .sha)" && \
          echo "::set-output name=LIBUV_COMMIT::$(curl $CURL_OPTIONS https://api.github.com/repos/libuv/libuv/commits/v1.x | jq -r .sha)" && \
          echo "::set-output name=UVW_COMMIT::$(curl $CURL_OPTIONS https://api.github.com/repos/darktohka/uvw/commits/v3 | jq -r .sha)" && \
          echo "::set-output name=YAML_COMMIT::$(curl $CURL_OPTIONS https://api.github.com/repos/darktohka/yaml-cpp/commits/patch-1 | jq -r .sha)" && \
          echo "::set-output name=SOCI_COMMIT::$(curl $CURL_OPTIONS https://api.github.com/repos/soci/soci/commits/master | jq -r .sha)" && \
          echo "::set-output name=MONGOC_VERSION::$(curl $CURL_OPTIONS https://api.github.com/repos/mongodb/mongo-c-driver/releases | jq -r first.tag_name)" && \
          FLEXBISON_REPLY="$(curl $CURL_OPTIONS https://api.github.com/repos/lexxmark/winflexbison/releases)" && \
          echo "::set-output name=FLEXBISON_BUILD_ID::$(echo $FLEXBISON_REPLY | jq -r '(first.assets | first).id')" && \
          echo "::set-output name=FLEXBISON_LINK::$(echo $FLEXBISON_REPLY | jq -r '(first.assets | first).browser_download_url')" && \
          SQLITE_REPLY="$(curl $CURL_OPTIONS https://sqlite.org/download.html)" && \
          SQLITE_FILENAME="$(echo "$SQLITE_REPLY" | sed -nE "s/^PRODUCT,.*UTC,(.*),.*,.*$/\1/p")" && \
          if [[ -z "$SQLITE_FILENAME" ]]; then SQLITE_FILENAME="2022/sqlite-amalgamation-3390000.zip"; fi && \
          echo "::set-output name=SQLITE_FILENAME::$SQLITE_FILENAME" && \
          echo "::set-output name=SQLITE_HASH::$(echo "$SQLITE_FILENAME" | openssl sha256 | cut -d ' ' -f 2)" && \
          ODBC_FILENAME="$(curl -Ss "https://www.unixodbc.org/download.html" | grep "Via HTTP:" | sed -E 's/.+HREF="(.+)".+/\1/')" && \
          echo "::set-output name=ODBC_FILENAME::$ODBC_FILENAME" && \
          echo "::set-output name=ODBC_HASH::$(echo "$ODBC_HASH" | openssl sha256 | cut -d ' ' -f 2)"
      - name: Set up Clang
        if: runner.os != 'Windows' && matrix.os != 'arm64'
        uses: egor-tensin/setup-clang@v1
        with:
          version: 14
          platform: x64
      - name: Setup Visual Studio
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Setup Ninja on Windows
        if: runner.os == 'Windows'
        uses: ashutoshvarma/setup-ninja@master
      - name: Setup Ninja on Linux
        if: runner.os == 'Linux' && matrix.os != 'arm64'
        shell: bash
        run: |
          sudo apt-get install -y ninja-build
      - name: Setup Ninja, Bison, Flex on Mac
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew install ninja bison flex && \
            for lib in bison flex; do find /usr/local/opt/$lib/bin -maxdepth 1 -type f -exec ln -s {} /usr/local/bin \;; done
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2.2
        with:
          key: ${{ matrix.os }}-lto-ccache
      - name: Enable Clang
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "CC=clang" >> $GITHUB_ENV && \
          echo "CXX=clang++" >> $GITHUB_ENV
      - name: Remove Mono.framework
        if: runner.os == 'macOS'
        shell: bash
        run: |
          sudo rm -rf /Library/Frameworks/Mono.framework
      - name: Cache OpenSSL
        id: cache-openssl
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/openssl
          key: ${{ matrix.os }}-${{ matrix.build_type }}-lto-openssl-${{ steps.query.outputs.OPENSSL_COMMIT }}
      - name: Cache mongo-c-driver
        id: cache-mongoc
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/mongoc
          key: ${{ matrix.os }}-${{ matrix.build_type }}-lto-mongoc-${{ steps.query.outputs.OPENSSL_COMMIT }}-${{ steps.query.outputs.MONGOC_COMMIT }}
      - name: Cache mongo-cxx-driver
        id: cache-mongocxx
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/mongocxx
          key: ${{ matrix.os }}-${{ matrix.build_type }}-lto-mongocxx-${{ steps.query.outputs.OPENSSL_COMMIT }}-${{ steps.query.outputs.MONGOC_COMMIT }}-${{ steps.query.outputs.MONGOCXX_COMMIT }}
      - name: Cache libuv
        id: cache-libuv
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/libuv
          key: ${{ matrix.os }}-${{ matrix.build_type }}-lto-libuv-${{ steps.query.outputs.LIBUV_COMMIT }}
      - name: Cache uvw
        id: cache-uvw
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/uvw
          key: ${{ matrix.os }}-${{ matrix.build_type }}-lto-uvw-${{ steps.query.outputs.LIBUV_COMMIT }}-${{ steps.query.outputs.UVW_COMMIT }}
      - name: Cache yaml-cpp
        id: cache-yaml
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/yaml
          key: ${{ matrix.os }}-${{ matrix.build_type }}-lto-yaml-${{ steps.query.outputs.YAML_COMMIT }}
      - name: Cache SQLite3
        id: cache-sqlite
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/sqlite
          key: ${{ matrix.os }}-${{ matrix.build_type }}-lto-sqlite-${{ steps.query.outputs.SQLITE_HASH }}
      - name: Cache ODBC
        if: runner.os != 'Windows'
        id: cache-odbc
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/odbc
          key: ${{ matrix.os }}-${{ matrix.build_type }}-lto-unixodbc-${{ steps.query.outputs.ODBC_HASH }}
      - name: Cache SOCI
        id: cache-soci
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/soci
          key: ${{ matrix.os }}-${{ matrix.build_type }}-lto-soci-${{ steps.query.outputs.SQLITE_HASH }}-${{ steps.query.outputs.ODBC_HASH }}-${{ steps.query.outputs.SOCI_COMMIT }}
      - name: Cache Bison and Flex
        if: runner.os == 'Windows'
        id: cache-bison
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/bison
          key: ${{ matrix.os }}-${{ matrix.build_type }}-bison-${{ steps.query.outputs.FLEXBISON_BUILD_ID }}
      - name: Checkout OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: "openssl/openssl"
          ref: "master"
          path: "openssl"
      - name: Download JomATH="/usr/lib/ccache:${PATH}" make
        if: steps.cache-openssl.outputs.cache-hit != 'true' && runner.os == 'Windows'
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "https://download.qt.io/official_releases/jom/unstable-jom.zip"
          target: openssl/
      - name: Unpack Jom
        if: steps.cache-openssl.outputs.cache-hit != 'true' && runner.os == 'Windows'
        shell: bash
        working-directory: openssl
        run: |
          unzip -qq unstable-jom.zip
      - name: Configure OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        working-directory: openssl
        run: |
          perl Configure ${{ matrix.openssl_arch }} no-asm no-shared no-tests no-module no-dso no-legacy --prefix="${{ github.workspace }}/libraries/openssl" --openssldir="${{ github.workspace }}/libraries/openssl" ${{ matrix.openssl_options }}
      - name: Build and install OpenSSL on Windows
        if: steps.cache-openssl.outputs.cache-hit != 'true' && runner.os == 'Windows'
        shell: pwsh
        working-directory: openssl
        run: >
          ./jom install_dev
      - name: Build and install OpenSSL on Linux and Mac
        if: steps.cache-openssl.outputs.cache-hit != 'true' && runner.os != 'Windows'
        shell: bash
        working-directory: openssl
        run: |
          sed -Ei "s/\"$CC/\"ccache $CC/" configdata.pm && (make || true) && make -j$(nproc) install_dev
      - name: Cleanup OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        shell: bash
        run: |
          rm -rf openssl
      - name: Checkout mongo-c-driver
        if: steps.cache-mongoc.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: "mongodb/mongo-c-driver"
          ref: "master"
          path: "mongo-c-driver"
      - name: Create mongo-c-driver versions
        if: steps.cache-mongoc.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "${{ steps.query.outputs.MONGOC_VERSION }}" > VERSION_CURRENT && \
          echo "${{ steps.query.outputs.MONGOC_VERSION }}" > VERSION_RELEASED
      - name: Setup mongo-c-driver
        if: steps.cache-mongoc.outputs.cache-hit != 'true'
        working-directory: mongo-c-driver
        shell: bash
        run: |
          cmake -G"Ninja" -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/libraries/mongoc" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_C_STANDARD=${{ matrix.c_standard }} \
            -DCMAKE_C_FLAGS="${{ matrix.c_flags }}" \
            -DBUILD_VERSION="${{ steps.query.outputs.MONGOC_VERSION }}" \
            -DENABLE_STATIC=ON -DENABLE_ZLIB=BUNDLED -DENABLE_ZSTD=OFF -DENABLE_SNAPPY=OFF -DENABLE_SASL=OFF \
            -DENABLE_SSL=OPENSSL -DENABLE_MONGODB_AWS_AUTH=OFF -DENABLE_EXTRA_ALIGNMENT=OFF -DENABLE_TESTS=OFF \
            -DENABLE_EXAMPLES=OFF -DENABLE_UNINSTALL=OFF -DENABLE_ICU=OFF -DMONGO_USE_CCACHE=ON .
      - name: Build and install mongo-c-driver
        if: steps.cache-mongoc.outputs.cache-hit != 'true'
        working-directory: mongo-c-driver
        shell: bash
        run: |
          cmake --build . --parallel 2 --target install --config ${{ matrix.build_type }}
      - name: Cleanup mongo-c-driver
        if: steps.cache-mongoc.outputs.cache-hit != 'true'
        shell: bash
        run: |
          rm -rf mongo-c-driver
      - name: Checkout mongo-cxx-driver
        if: steps.cache-mongocxx.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: "mongodb/mongo-cxx-driver"
          ref: "master"
          path: "mongo-cxx-driver"
      - name: Cleanup mongo-cxx-driver
        if: steps.cache-mongocxx.outputs.cache-hit != 'true'
        shell: bash
        working-directory: mongo-cxx-driver
        run: |
          for dir in benchmark docs examples; do rm -rf $dir; mkdir -p $dir; touch $dir/CMakeLists.txt; done
      - name: Setup mongo-cxx-driver
        if: steps.cache-mongocxx.outputs.cache-hit != 'true'
        working-directory: mongo-cxx-driver
        shell: bash
        run: |
          cmake -G"Ninja" -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/libraries/mongocxx" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_FLAGS="${{ matrix.cxx_flags }}" \
            -DCMAKE_CXX_STANDARD=${{ matrix.cxx_standard }} -DBUILD_VERSION="${{ steps.query.outputs.MONGOC_VERSION }}" \
            -DBUILD_SHARED_LIBS=OFF -DENABLE_UNINSTALL=OFF -DENABLE_TESTS=OFF \
            .
      - name: Build and install mongo-cxx-driver
        if: steps.cache-mongocxx.outputs.cache-hit != 'true'
        working-directory: mongo-cxx-driver
        shell: bash
        run: |
          cmake --build . --parallel 2 --target install --config ${{ matrix.build_type }}
      - name: Cleanup mongo-cxx-driver
        if: steps.cache-mongocxx.outputs.cache-hit != 'true'
        shell: bash
        run: |
          rm -rf mongo-cxx-driver
      - name: Checkout libuv
        if: steps.cache-libuv.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: "libuv/libuv"
          ref: "v1.x"
          path: "libuv"
      - name: Setup libuv
        if: steps.cache-libuv.outputs.cache-hit != 'true'
        working-directory: libuv
        shell: bash
        run: |
          cmake -G"Ninja" -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/libraries/libuv" \
            -DCMAKE_C_STANDARD=${{ matrix.c_standard }} -DCMAKE_C_FLAGS="${{ matrix.c_flags }}" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DLIBUV_BUILD_TESTS=OFF -DLIBUV_BUILD_BENCH=OFF .
      - name: Build and install libuv
        if: steps.cache-libuv.outputs.cache-hit != 'true'
        working-directory: libuv
        shell: bash
        run: |
          cmake --build . --parallel 2 --target install --config ${{ matrix.build_type }}
      - name: Cleanup libuv
        if: steps.cache-libuv.outputs.cache-hit != 'true'
        shell: bash
        run: |
          rm -rf libuv
      - name: Checkout uvw
        if: steps.cache-uvw.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: "darktohka/uvw"
          ref: "v3"
          path: "uvw"
      - name: Setup uvw
        if: steps.cache-uvw.outputs.cache-hit != 'true'
        working-directory: uvw/build
        shell: bash
        run: |
          cmake -G"Ninja" -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/libraries/uvw" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_FLAGS="${{ matrix.cxx_flags }}" \
            -DBUILD_UVW_SHARED_LIB=OFF -DBUILD_UVW_LIBS=OFF \
            -DBUILD_TESTING=OFF -DBUILD_DOCS=OFF -DFETCH_LIBUV=OFF -DFIND_LIBUV=OFF ..
      - name: Build and install uvw
        if: steps.cache-uvw.outputs.cache-hit != 'true'
        working-directory: uvw/build
        shell: bash
        run: |
          cmake --build . --parallel 2 --target install --config ${{ matrix.build_type }}
      - name: Cleanup uvw
        if: steps.cache-uvw.outputs.cache-hit != 'true'
        shell: bash
        run: |
          rm -rf uvw
      - name: Checkout yaml-cpp
        if: steps.cache-yaml.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: "darktohka/yaml-cpp"
          ref: "patch-1"
          path: "yaml"
      - name: Setup yaml-cpp
        if: steps.cache-yaml.outputs.cache-hit != 'true'
        working-directory: yaml
        shell: bash
        run: |
          cmake -G"Ninja" -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/libraries/yaml" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_FLAGS="${{ matrix.cxx_flags }}" \
            -DCMAKE_CXX_STANDARD=${{ matrix.cxx_standard }} -DYAML_CPP_BUILD_CONTRIB=OFF -DYAML_CPP_BUILD_TOOLS=OFF -DYAML_BUILD_SHARED_LIBS=OFF \
            -DYAML_CPP_FORMAT_SOURCE=OFF -DYAML_CPP_BUILD_TESTS=OFF -DBUILD_SHARED_LIBS=OFF \
            .
      - name: Build and install yaml-cpp
        if: steps.cache-yaml.outputs.cache-hit != 'true'
        working-directory: yaml
        shell: bash
        run: |
          cmake --build . --parallel 2 --target install --config ${{ matrix.build_type }}
      - name: Cleanup yaml-cpp
        if: steps.cache-yaml.outputs.cache-hit != 'true'
        shell: bash
        run: |
          rm -rf yaml
      - name: Download SQLite3
        if: steps.cache-sqlite.outputs.cache-hit != 'true'
        uses: suisei-cn/actions-download-file@v1
        with:
          url: https://sqlite.org/${{ steps.query.outputs.SQLITE_FILENAME }}
          target: sqlite/
      - name: Extract SQLite3
        if: steps.cache-sqlite.outputs.cache-hit != 'true'
        shell: bash
        working-directory: sqlite
        run: |
          ((tar -xzf *.tar.gz && rm -f *.tar.gz) || (unzip -qq *.zip && rm -f *.zip)) && mv sqlite-* src
      - name: Create SQLite3 project
        if: steps.cache-sqlite.outputs.cache-hit != 'true'
        shell: bash
        working-directory: sqlite
        run: >
          cat <<EOF > CMakeLists.txt
            PROJECT(sqlite3)
            cmake_minimum_required(VERSION 3.10)

            include_directories(${CMAKE_SOURCE_DIR}/src)
            add_library(sqlite3 STATIC src/sqlite3.c src/sqlite3.h src/sqlite3ext.h)

            add_definitions(-DSQLITE_ENABLE_RTREE)
            add_definitions(-DSQLITE_ENABLE_FTS4)
            add_definitions(-DSQLITE_ENABLE_FTS5)
            add_definitions(-DSQLITE_ENABLE_JSON1)
            add_definitions(-DSQLITE_ENABLE_RBU)
            add_definitions(-DSQLITE_ENABLE_STAT4)

            install(FILES src/sqlite3.h src/sqlite3ext.h DESTINATION include)
            install(TARGETS sqlite3 LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)
          EOF
      - name: Setup SQLite3
        if: steps.cache-sqlite.outputs.cache-hit != 'true'
        working-directory: sqlite
        shell: bash
        run: |
          cmake -G"Ninja" -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/libraries/sqlite" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_C_STANDARD=${{ matrix.c_standard }} \
            -DCMAKE_C_FLAGS="${{ matrix.c_flags }}" .
      - name: Build and install SQLite3
        if: steps.cache-sqlite.outputs.cache-hit != 'true'
        working-directory: sqlite
        shell: bash
        run: |
          cmake --build . --parallel 2 --target install --config ${{ matrix.build_type }}
      - name: Cleanup SQLite3
        if: steps.cache-sqlite.outputs.cache-hit != 'true'
        shell: bash
        run: |
          rm -rf sqlite
      - name: Download and extract ODBC
        if: runner.os != 'Windows' && steps.cache-odbc.outputs.cache-hit != 'true'
        shell: bash
        working-directory: odbc
        run: |
          wget -q "https://download.nus.edu.sg/mirror/ubuntu/pool/main/u/unixodbc/unixodbc_2.3.11.orig.tar.gz" -O - | tar -xz --strip-components=1
      - name: Setup ODBC
        if: runner.os != 'Windows' && steps.cache-odbc.outputs.cache-hit != 'true'
        working-directory: odbc/src
        shell: bash
        run: |
          ./configure CFLAGS="${{ matrix.c_flags }}" --enable-static --disable-shared \
            --disable-dependency-tracking --disable-iconv --enable-ltdl-install \
            --prefix="${{ github.workspace }}/libraries/odbc"
      - name: Build and install ODBC
        if: runner.os != 'Windows' && steps.cache-odbc.outputs.cache-hit != 'true'
        working-directory: odbc
        shell: bash
        run: |
          PATH="/usr/lib/ccache:${PATH}" make -j$(nproc) install
      - name: Checkout SOCI
        if: steps.cache-soci.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: "SOCI/soci"
          ref: "master"
          path: "soci"
      - name: Setup SOCI
        if: steps.cache-soci.outputs.cache-hit != 'true'
        working-directory: soci
        shell: bash
        run: |
          cmake -G"Ninja" -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/libraries/soci" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_FLAGS="${{ matrix.cxx_flags }}" \
            -DCMAKE_CXX_STANDARD=${{ matrix.cxx_standard }} -DSOCI_SHARED=OFF -DSOCI_TESTS=OFF \
            .
      - name: Build and install SOCI
        if: steps.cache-soci.outputs.cache-hit != 'true'
        working-directory: soci
        shell: bash
        run: |
          cmake --build . --parallel 2 --target install --config ${{ matrix.build_type }}
      - name: Fix SOCI library names
        if: steps.cache-soci.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/libraries/soci/lib
        shell: bash
        run: |
          for file in $(find . -name "*_*_*.*"); do mv "$file" "${file//_[0-9]}"; done
      - name: Cleanup Soci
        if: steps.cache-soci.outputs.cache-hit != 'true'
        shell: bash
        run: |
          rm -rf soci
      - name: Download Bison and Flex
        if: steps.cache-bison.outputs.cache-hit != 'true' && runner.os == 'Windows'
        uses: suisei-cn/actions-download-file@v1
        with:
          url: ${{ steps.query.outputs.FLEXBISON_LINK }}
          target: ${{ github.workspace }}/libraries/bison
      - name: Unzip Bison and Flex
        if: steps.cache-bison.outputs.cache-hit != 'true' && runner.os == 'Windows'
        shell: bash
        working-directory: ${{ github.workspace }}/libraries/bison
        run: |
          unzip -qq *.zip && rm -f *.zip
      - name: Cache Boost
        id: cache-boost
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/boost
          key: boost
      - name: Create Boost folder
        if: steps.cache-boost.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p boost/boost/built libraries/boost/include libraries/boost/cmake
      - name: Install Boost on Windows
        if: steps.cache-boost.outputs.cache-hit != 'true' && runner.os == 'Windows'
        uses: MarkusJx/install-boost@v2.3.0
        with:
          boost_version: "1.81.0"
          boost_install_dir: "${{ github.workspace }}"
          platform_version: 2022
          toolset: msvc
      - name: Install Boost on Linux
        if: steps.cache-boost.outputs.cache-hit != 'true' && runner.os == 'Linux'
        uses: MarkusJx/install-boost@v2.3.0
        with:
          boost_version: "1.81.0"
          boost_install_dir: "${{ github.workspace }}"
          platform_version: "20.04"
      - name: Install Boost on Mac
        if: steps.cache-boost.outputs.cache-hit != 'true' && runner.os == 'macOS'
        uses: MarkusJx/install-boost@v2.3.0
        with:
          boost_version: "1.81.0"
          boost_install_dir: "${{ github.workspace }}"
          platform_version: "11"
      - name: Fix Boost folder
        if: steps.cache-boost.outputs.cache-hit != 'true'
        shell: bash
        working-directory: boost/boost
        run: |
          rm -rf boost && cp -r include/boost .
      - name: Build Boost on Windows
        if: steps.cache-boost.outputs.cache-hit != 'true' && runner.os == 'Windows'
        shell: pwsh
        working-directory: boost/boost
        run: >
          ./bootstrap.bat; ./b2 tools/bcp; ./dist/bin/bcp icl optional tuple fusion date_time built
      - name: Build Boost on Linux and Mac
        if: steps.cache-boost.outputs.cache-hit != 'true' && runner.os != 'Windows'
        shell: bash
        working-directory: boost/boost
        run: >
          ./bootstrap.sh; ./b2 tools/bcp; ./dist/bin/bcp icl optional tuple fusion date_time built
      - name: Package Boost
        if: steps.cache-boost.outputs.cache-hit != 'true'
        shell: bash
        working-directory: boost/boost/built
        run: |
          mv boost "${{ github.workspace }}/libraries/boost/include/" && cp ../tools/cmake/include/*.cmake "${{ github.workspace }}/libraries/boost/cmake/" && find "${{ github.workspace }}/libraries/boost"
      - name: Cleanup Boost
        if: steps.cache-boost.outputs.cache-hit != 'true'
        shell: bash
        run: |
          rm -rf boost
      - name: Checkout Astron
        uses: actions/checkout@v3
        with:
          path: "Astron"
      - name: Setup Astron
        working-directory: Astron/build
        shell: bash
        run: |
          cmake -G"Ninja" -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/build/astron" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_FLAGS="${{ matrix.cxx_flags }}" \
            -DCMAKE_CXX_STANDARD=${{ matrix.cxx_standard }} \
            -DCMAKE_EXE_LINKER_FLAGS="${{ matrix.exe_linker_flags }}" \
            ..
      - name: Build and install Astron
        working-directory: Astron/build
        shell: bash
        run: |
          cmake --build . --parallel 2 --target install --config ${{ matrix.build_type }}
      - name: Upload Astron on Windows
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-astron
          path: ${{ github.workspace }}/build/astron/bin/astrond.exe
      - name: Upload unstripped Astron on Linux and Mac
        if: runner.os != 'Windows' && matrix.build_type == 'Release'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-astron-debug
          path: ${{ github.workspace }}/build/astron/bin/astrond
      - name: Strip Astron
        if: runner.os != 'Windows' && matrix.build_type == 'Release'
        working-directory: build/astron/bin
        shell: bash
        run: |
          strip astrond
      - name: Upload Astron on Linux and Mac
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-${{ matrix.build_type }}-astron
          path: ${{ github.workspace }}/build/astron/bin/astrond
      - name: Package libraries
        if: matrix.build_type == 'Release'
        shell: bash
        run: |
          tar -acf astron-libraries.tar.zst libraries
      - name: Upload libraries
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-${{ matrix.build_type }}-libraries
          path: astron-libraries.tar.zst
