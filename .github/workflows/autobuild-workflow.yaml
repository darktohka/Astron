name: Autobuild for Windows

on: [push, workflow_dispatch, repository_dispatch]

env:
  CMAKE_PREFIX_PATH: "${{ github.workspace }}\\libraries\\uvw;${{ github.workspace }}\\libraries\\boost;${{ github.workspace }}\\libraries\\openssl;${{ github.workspace }}\\libraries\\soci;${{ github.workspace }}\\libraries\\mongoc;${{ github.workspace }}\\libraries\\mongocxx;${{ github.workspace }}\\libraries\\libuv;${{ github.workspace }}\\libraries\\yaml;${{ github.workspace }}\\libraries"

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Setup Visual Studio
        uses: ilammy/msvc-dev-cmd@v1
      - name: Query third party commits
        id: query
        shell: bash
        run: |
          echo "::set-output name=MONGOC_COMMIT::$(curl -sS https://api.github.com/repos/mongodb/mongo-c-driver/commits/master | jq -r .sha)" && \
          echo "::set-output name=MONGOCXX_COMMIT::$(curl -sS https://api.github.com/repos/mongodb/mongo-cxx-driver/commits/master | jq -r .sha)" && \
          echo "::set-output name=OPENSSL_COMMIT::$(curl -sS https://api.github.com/repos/darktohka/openssl/commits/feature/add-no-apps | jq -r .sha)" && \
          echo "::set-output name=LIBUV_COMMIT::$(curl -sS https://api.github.com/repos/libuv/libuv/commits/v1.x | jq -r .sha)" && \
          echo "::set-output name=UVW_COMMIT::$(curl -sS https://api.github.com/repos/darktohka/uvw/commits/patch-1 | jq -r .sha)" && \
          echo "::set-output name=YAML_COMMIT::$(curl -sS https://api.github.com/repos/jbeder/yaml-cpp/commits/master | jq -r .sha)" && \
          echo "::set-output name=SOCI_COMMIT::$(curl -sS https://api.github.com/repos/soci/soci/commits/master | jq -r .sha)" && \
          echo "::set-output name=MONGOC_VERSION::$(curl -sS https://api.github.com/repos/mongodb/mongo-c-driver/releases | jq -r .[0].tag_name)"
      - name: Cache OpenSSL
        id: cache-openssl
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/openssl
          key: ${{ runner.os }}-openssl-${{ steps.query.outputs.OPENSSL_COMMIT }}
      - name: Cache mongo-c-driver
        id: cache-mongoc
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/mongoc
          key: ${{ runner.os }}-mongoc-${{ steps.query.outputs.OPENSSL_COMMIT }}-${{ steps.query.outputs.MONGOC_COMMIT }}
      - name: Cache mongo-cxx-driver
        id: cache-mongocxx
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/mongocxx
          key: ${{ runner.os }}-mongocxx-${{ steps.query.outputs.OPENSSL_COMMIT }}-${{ steps.query.outputs.MONGOC_COMMIT }}-${{ steps.query.outputs.MONGOCXX_COMMIT }}
      - name: Cache libuv
        id: cache-libuv
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/libuv
          key: ${{ runner.os }}-uv-${{ steps.query.outputs.LIBUV_COMMIT }}
      - name: Cache uvw
        id: cache-uvw
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/uvw
          key: ${{ runner.os }}-uvw-${{ steps.query.outputs.LIBUV_COMMIT }}-${{ steps.query.outputs.UVW_COMMIT }}
      - name: Cache yaml-cpp
        id: cache-yaml
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/yaml
          key: ${{ runner.os }}-yaml-${{ steps.query.outputs.YAML_COMMIT }}
      - name: Cache SOCI
        id: cache-soci
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/soci
          key: ${{ runner.os }}-soci2-${{ steps.query.outputs.SOCI_COMMIT }}
      - name: Cache Boost
        id: cache-boost
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/libraries/boost
          key: ${{ runner.os }}-boost
      - name: Checkout OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: "darktohka/openssl"
          ref: "feature/add-no-apps"
          path: "openssl"
      - name: Download Jom
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "https://download.qt.io/official_releases/jom/unstable-jom.zip"
          target: openssl/
      - name: Unpack Jom
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        shell: bash
        working-directory: openssl
        run: >
          unzip -qq unstable-jom.zip
      - name: Configure OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        shell: powershell
        working-directory: openssl
        run: >
          perl configure VC-WIN64A no-asm no-shared no-tests no-module no-dso no-legacy no-apps `
            --prefix="${{ github.workspace }}\libraries\openssl" --openssldir="${{ github.workspace }}\libraries\openssl" /FS
      - name: Build and install OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        shell: powershell
        working-directory: openssl
        run: >
          ./jom install_sw
      - name: Checkout mongo-c-driver
        if: steps.cache-mongoc.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: "mongodb/mongo-c-driver"
          ref: "master"
          path: "mongo-c-driver"
      - name: Setup mongo-c-driver
        if: steps.cache-mongoc.outputs.cache-hit != 'true'
        working-directory: ./mongo-c-driver
        shell: powershell
        run: >
          cmake -G"Visual Studio 17 2022" -A x64 -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" `
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/libraries/mongoc" `
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_STANDARD=23 `
            -DBUILD_VERSION="${{ steps.query.outputs.MONGOC_VERSION }}" `
            -DENABLE_STATIC=ON -DENABLE_ZLIB=BUNDLED -DENABLE_ZSTD=OFF -DENABLE_SNAPPY=OFF -DENABLE_SASL=OFF `
            -DENABLE_SSL=OPENSSL -DENABLE_MONGODB_AWS_AUTH=OFF -DENABLE_EXTRA_ALIGNMENT=OFF -DENABLE_TESTS=OFF `
            -DENABLE_EXAMPLES=OFF .
      - name: Build and install mongo-c-driver
        if: steps.cache-mongoc.outputs.cache-hit != 'true'
        working-directory: ./mongo-c-driver
        shell: powershell
        run: >
          cmake --build . --target install --config Release
      - name: Checkout mongo-cxx-driver
        if: steps.cache-mongocxx.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: "mongodb/mongo-cxx-driver"
          ref: "master"
          path: "mongo-cxx-driver"
      - name: Cleanup mongo-cxx-driver
        if: steps.cache-mongocxx.outputs.cache-hit != 'true'
        shell: bash
        working-directory: mongo-cxx-driver
        run: |
          for dir in benchmark docs examples; do rm -rf $dir; mkdir -p $dir; touch $dir/CMakeLists.txt; done
      - name: Setup mongo-cxx-driver
        if: steps.cache-mongocxx.outputs.cache-hit != 'true'
        working-directory: ./mongo-cxx-driver
        shell: powershell
        run: >
          cmake -G"Visual Studio 17 2022" -A x64 -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" `
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/libraries/mongocxx" `
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="/Zc:__cplusplus" `
            -DCMAKE_CXX_STANDARD=23 -DBUILD_VERSION="${{ steps.query.outputs.MONGOC_VERSION }}" `
            -DBUILD_SHARED_LIBS=OFF -DENABLE_UNINSTALL=OFF -DENABLE_TESTS=OFF `
            .
      - name: Build and install mongo-cxx-driver
        if: steps.cache-mongocxx.outputs.cache-hit != 'true'
        working-directory: ./mongo-cxx-driver
        shell: powershell
        run: >
          cmake --build . --target install --config Release
      - name: Checkout libuv
        if: steps.cache-libuv.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: "libuv/libuv"
          ref: "v1.x"
          path: "libuv"
      - name: Setup libuv
        if: steps.cache-libuv.outputs.cache-hit != 'true'
        working-directory: ./libuv
        shell: powershell
        run: >
          cmake -G"Visual Studio 17 2022" -A x64 -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" `
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/libraries/libuv" `
            -DCMAKE_C_STANDARD=23 -DLIBUV_BUILD_TESTS=OFF -DLIBUV_BUILD_BENCH=OFF .
      - name: Build and install libuv
        if: steps.cache-libuv.outputs.cache-hit != 'true'
        working-directory: ./libuv
        shell: powershell
        run: >
          cmake --build . --target install --config Release
      - name: Checkout uvw
        if: steps.cache-uvw.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: "darktohka/uvw"
          ref: "patch-1"
          path: "uvw"
      - name: Setup uvw
        if: steps.cache-uvw.outputs.cache-hit != 'true'
        working-directory: uvw/build
        shell: powershell
        run: >
          cmake -G"Visual Studio 17 2022" -A x64 -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" `
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/libraries/uvw" `
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="/Zc:__cplusplus" `
            -DCMAKE_CXX_STANDARD=23g -DBUILD_UVW_SHARED_LIB=OFF -DBUILD_UVW_LIBS=ON `
            -DBUILD_TESTING=OFF -DBUILD_DOCS=OFF -DFETCH_LIBUV=OFF -DFIND_LIBUV=ON ..
      - name: Build and install uvw
        if: steps.cache-uvw.outputs.cache-hit != 'true'
        working-directory: uvw/build
        shell: powershell
        run: >
          cmake --build . --target install --config Release
      - name: Checkout yaml-cpp
        if: steps.cache-yaml.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: "jbeder/yaml-cpp"
          ref: "master"
          path: "yaml"
      - name: Setup yaml-cpp
        if: steps.cache-yaml.outputs.cache-hit != 'true'
        working-directory: yaml
        shell: powershell
        run: >
          cmake -G"Visual Studio 17 2022" -A x64 -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" `
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/libraries/yaml" `
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="/Zc:__cplusplus" `
            -DCMAKE_CXX_STANDARD=23 -DYAML_CPP_BUILD_CONTRIB=OFF -DYAML_CPP_BUILD_TOOLS=OFF -DYAML_BUILD_SHARED_LIBS=OFF `
            -DYAML_CPP_FORMAT_SOURCE=OFF -DYAML_CPP_BUILD_TESTS=OFF `
            .
      - name: Build and install yaml-cpp
        if: steps.cache-yaml.outputs.cache-hit != 'true'
        working-directory: yaml
        shell: powershell
        run: >
          cmake --build . --target install --config Release
      - name: Checkout SOCI
        if: steps.cache-soci.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: "SOCI/soci"
          ref: "master"
          path: "soci"
      - name: Setup SOCI
        if: steps.cache-soci.outputs.cache-hit != 'true'
        working-directory: soci
        shell: powershell
        run: >
          cmake -G"Visual Studio 17 2022" -A x64 -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" `
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/libraries/soci" `
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="/Zc:__cplusplus" `
            -DCMAKE_CXX_STANDARD=23 -DSOCI_SHARED=OFF -DSOCI_TESTS=OFF `
            .
      - name: Build and install SOCI
        if: steps.cache-soci.outputs.cache-hit != 'true'
        working-directory: soci
        shell: powershell
        run: >
          cmake --build . --target install --config Release
      - name: Fix SOCI library names
        if: steps.cache-soci.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/libraries/soci/lib
        shell: bash
        run: |
          for file in $(find . -name "*_*_*.*"); do mv "$file" "${file//_[0-9]}"; done